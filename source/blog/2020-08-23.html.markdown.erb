---
title: "A Gamer's Guide to: Servers"
blog: blog
date: 2020-08-23
tags: gaming
---
Welcome to my first "A Gamer's Guide toâ€¦" post. This series will cover a wide range of topics of interest to gamers from the perspective of a video game developer.

I know a little about what goes into making a video game. I gained a wide breadth of knowledge of every part of a video game including game engines, physics, gameplay, audio, AI, C++ (shiver) and more in a post graduate program. After finishing my degree, I was hired by an independent game studio, Borealys Games, to work on Mages of Mystralia, a Zelda-like game where instead of gaining items you gain runes which you can combine to create your own spells. After shipping the game and working on a cancelled project, I went on to Framestore VR where we built high-end VR experiences meant to be installed in amusement parks (lol@amusement parks in 2020). I'm not working in the video game industry because making games is really hard and so I'd much rather be doing other kinds of work.

With that out of the way, today's topic is online multiplayer games and servers. How can you and your friends play a game together over the internet? How can a game be developed to make it harder for hackers to ruin the multiplayer experience for the other players? What's the difference between a dedicated server and a non-dedicated server? When someone says peer-to-peer what does that mean?

I will try to answer all these questions and more over the course of the next few paragraphs. Follow me on this journey, into the magical world of servers.

# Basics
A server is a computer. To understand what a server does, we need to understand what a computer does. Computers speak in zeros and ones. Anything you do on a computer is just a sequence of zeros and ones on some level. Watching Netflix? Zeros and ones. Drawing anime girls? Zeros and ones. Playing video games? Zeros and ones. You get the idea.

We build on top of these zeros and ones to make a computer work for us. So, the problem we're trying to solve when designing an online multiplayer video game is, how can we allow multiple players to play with each other over the internet? Zeros and ones...

At the most basic level, we need to send zeros and ones over the internet, in some way, to ensure that all the players are experience the same simulated game world, or as close to the same as possible.

I will now discuss the two major architectures that you are most likely to run into in the wild. I will simplify a lot to make the topic digestible. There are exceptions to everything I will write, for example peer-to-peer architectures have mostly fallen out of favor however if you're a fighting game player, you'll know that the best kind of online network architecture is GGPO which is a peer-to-peer architecture.

I will start by explaining what a peer-to-peer architecture looks like, then I will cover the more common client-server architecture and explain why it's used in most video games these days.

# Peer-to-Peer Architecture

<% graphviz do %>
graph G {
  nodesep=1.5;

  a -- b;
  a -- c;
  a -- d;
  b -- c;
  b -- d;
  c -- d;

  { rank = same; a; b; }
  { rank = same; c; d; }


  a [label="Client 1"]
  b [label="Client 2"]
  c [label="Client 3"]
  d [label="Client 4"]
}
<% end %>

If you've ever heard a seven year old child scream at his mother to "unplug the router, you cunt!", then you have most likely played a game with some form of peer-to-peer architecture. My first online gaming experiences, namely Starcraft 2 and Halo 2, suffered from the use of a peer-to-peer architecture.

The most common form of peer-to-peer architecture is one client, acting as a "host", who's game communicates with all other clients in order to ensure that each is playing within a consistent game simulation but also reacts to the host player inputs and displays the game to that player graphically. Very rarely, do you see a purely peer-to-peer architectures in video games. This can be considered to be the polar opposite of the dedicated server paradigm which we will be looking at in the next section.

<% graphviz do %>
graph G {

  s -- c2;
  s -- c3;
  s -- c4;

  s [label="Client/Server 1"]
  c2 [label="Client 2"]
  c3 [label="Client 3"]
  c4 [label="Client 4"]
}
<% end %>

A peer-to-peer architecture is usually more complex to implement than a client-server architecture, but it is usually cheaper to run over the long term because the game developer doesn't maintain to have as many (or any potentially) of their own servers. The players use their own hardware (PCs, consoles or phones) to play the game. In theory, this approach can be infinitely scalable because if there are more players then by definition there are more servers for players to play on.

This architecture has fallen out of favour because:
- Most AAA video games have more than two players playing with each other at once.
- Most AAA video games are competitive in nature, and peer-to-peer architectures can suffer from unfairness caused by, usually, one player having an advantage over the others.
- Also, the host player can easily cheat given that they have complete control over the simulation of the game world.
- It's difficult to ensure the quality of connection that a particular player will provide given not everyone's internet is great and also they can decide to make it especially bad by pulling the plug. No matter how this is handled, it is extremely disruptive to the multiplayer experience.

It's not used much these days but before we move on to the client-server architecture, let's take a quick look at cheating.

In a peer-to-peer architecture, the host player's game process is fully responsible for simulating the shared game world inhabited by all the players. Thus, a malicious host can modify their own game process through reverse engineering in order to give them an unfair advantage. For example, they could potentially gives their character invincible, make their character invisible, allow their character to teleport or phase through walls, etc.

These are generic examples, every game is built differently and so the specific kind of cheating that could occur in a peer-to-peer architecture is vast. As is clear by the efficiency and popularity of GGPO, it is possible to create a peer-to-peer networking architecture that works and prevents cheating but it's more of an exception to the rule.

Now we'll take a look at the much more common network architecture, the client-server architecture.

# Client-Server Architecture

<% graphviz do %>
graph G {

  s -- c1;
  s -- c2;
  s -- c3;

  s [label="Server"]
  c1 [label="Client 1"]
  c2 [label="Client 2"]
  c3 [label="Client 3"]
}
<% end %>

..............................

As seen previously, we're trying to solve the problem of sending zeros and ones over the network between computers in order to allow them to communicate with each other in such a way to provide a shared multiplayer video game experience for two or more players over the internet..

A client-server architecture is built upon the principle of having one computer, the server,  communicate with several clients, the players. There are many reasons why this architecture is favoured these days but one of the main ones is that the game developers have full control over the server and thus have a means of controlling the flow of data to prevent players, or clients, from cheating.

Briefly, let's discuss the difference between a dedicated server and a non dedicated server. A dedicated server is a server whose sole purpose is to conduct and run the simulation of the shared world inhabited by the players, it is non graphical usually. A non dedicated server is a server which simultaneously acts as a simulation of the shared world but also a graphical display, allowing one player to "host" a multiplayer game.

<% graphviz do %>
graph G {

  s -- c2;
  s -- c3;
  s -- c4;

  s [label="Client/Server 1"]
  c2 [label="Client 2"]
  c3 [label="Client 3"]
  c4 [label="Client 4"]
}
<% end %>

This is less interesting than the dedicated server approach for performance reasons (the host player's computer must both simulate the game for all players and display/react to the host player's inputs) and because the host player has ample opportunity to cheat at the game.

The dedicated server approach within a client-server architecture is the favoured method of implementation of online multiplayer play in today's AAA industry. It tends to be the most expensive of all possible implementations, however it is the best in terms of security and preventing players from cheating.

# MMOs?
I have no experienceIn how MMOs are built. What I can tell you is that they are the most complex online multiplayer games in existence, so much so that most games nowadays that call themselves atomos hard really and of those. if you're interested in the topic I know that both wow and best science fiction game oh, both have very interesting online networking architectures and both of these are available to read about online I think.

# Conclusion
I hope that this post was instructive. And has given you the tools to understand, at a basic level, how the online multiplayer games you play work. I hope that the next time you want to play a game that requires you to setup a dedicated server you have a little bit more knowledge and understanding of why.

